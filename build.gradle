plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    //id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"    //query dsl
}

group = 'com.study'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // SpringSecurity
    implementation 'org.springframework.boot:spring-boot-starter-security:3.0.4'
    testImplementation 'org.springframework.security:spring-security-test'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    //io.jsonwebtoken : jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'


    // com.sun.xml.bind : jwt
    implementation 'com.sun.xml.bind:jaxb1-impl:2.2.5.1'
    implementation 'com.sun.xml.bind:jaxb-core:4.0.2'
    // javax.xml.bind : jwt
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

    //email
    implementation 'org.springframework.boot:spring-boot-starter-mail:3.0.4'

    //QueryDsl
    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

}

tasks.named('test') {
    useJUnitPlatform()
}

def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}